namespace stepik {

template <typename T>
class shared_ptr {
public:
    template <typename next>
    friend class shared_ptr;

    explicit shared_ptr(T *ptr = nullptr) : pointer(ptr), count(ptr ? new long(1) : nullptr) { } //конструктор, explicit защищает от непредвиденных неявных преобразований

    ~shared_ptr() { //деструктор
        if(pointer)remove_pointer();
    }

    shared_ptr(const shared_ptr & other) { //конструктор копирования
        pointer = other.pointer;
        count = other.count;
        if(pointer) (*count)++;
    }

    template <typename next>
    shared_ptr(const shared_ptr<next> & other) { //тип next должен быть полностью определён и неявно преобразовываться в T
        pointer = other.pointer;
        count = other.count;
        if(pointer) (*count)++;
    }

    shared_ptr& operator = (const shared_ptr & other) { //перегрузка оператора присваивания
        if(pointer != other.pointer) { //заменяет управляемый объект
            if(pointer) remove_pointer();
            pointer = other.pointer;
            count = other.count;
            if(pointer) (*count)++;
        }
        return *this;
    }

    template <typename next>
    shared_ptr& operator = (const shared_ptr<next> & other) { //перегрузка оператора присваивания
        if(pointer != other.pointer) { //заменяет управляемый объект
            if(pointer) remove_pointer();
            pointer = other.pointer;
            count = other.count;
            if(pointer) (*count)++;
        }
        return *this;
    }

    template <typename next>
    bool operator == (const shared_ptr<next> & other) const {
        return pointer == other.pointer;
    }

    template <typename next>
    bool operator != (const shared_ptr<next> & other) const {
        return pointer != other.pointer;
    }

    explicit operator bool() const { //проверяет, указывает ли указатель на объект
        return pointer != nullptr;
    }

    T* get() const { //возвращает указатель на управляемый объект
        return pointer;
    }

    long use_count() const { //возвращает количество объектов shared_ptr, которые ссылаются на тот же управляемый объект
        return (count ? *count: 0);
    }

    T& operator * () const { //	разыменовывает указатель на управляемый объект
        return *pointer;       //ссылка на управляемый объект (куча)
    }

    T* operator -> () const { //разыменовывает указатель на управляемый объект
        return pointer;         //указатель на управляемый объект (стек)
    }

    void swap(shared_ptr& x) noexcept { //спецификатор времени компиляции noexcept, которой говорит компилятору о том, что функция не будет выбрасывать исключения
        std:: swap(pointer, x.pointer);   //меняет местами
        std:: swap(count, x.count);
    }

    void reset(T *ptr = nullptr) { //заменяет объект, которым владеет
        if(pointer) remove_pointer();
        pointer = ptr;
        if(pointer) count = new long(1);
        else count = nullptr;
    }

private:
    T *pointer;  //указатель на объект
    long *count; //счетчик ссылок

    void remove_pointer() {
        if((*count) == 1) {
            delete pointer;
            delete count;
        }
        else (*count)--;
    }
};
} // namespace stepik
